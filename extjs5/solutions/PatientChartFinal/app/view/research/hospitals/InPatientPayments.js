/*
 * File: app/view/research/hospitals/InPatientPayments.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PatientChart.view.research.hospitals.InPatientPayments', {
    extend: 'Ext.window.Window',
    alias: 'widget.hospitalstatswindow',

    requires: [
        'PatientChart.view.research.hospitals.InPatientPaymentsViewModel',
        'PatientChart.view.research.hospitals.InPatientPaymentsViewController',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Number',
        'Ext.grid.feature.GroupingSummary',
        'Ext.panel.Tool',
        'Ext.grid.selection.SpreadsheetModel',
        'Ext.grid.plugin.Clipboard'
    ],

    controller: 'researchhospitalsinpatientpayments',
    viewModel: {
        type: 'researchhospitalsinpatientpayments'
    },
    constrain: true,
    autoShow: true,
    height: 476,
    width: 1000,
    layout: 'border',
    title: 'Hospital Inpatient Statistics',
    maximizable: true,

    items: [
        {
            xtype: 'panel',
            region: 'west',
            split: true,
            weight: 50,
            width: 200,
            layout: 'accordion',
            collapsible: true,
            header: false,
            title: 'Filter',
            items: [
                {
                    xtype: 'treepanel',
                    reference: 'statefiltertree',
                    width: 200,
                    title: 'By State',
                    rootVisible: false,
                    useArrows: true,
                    bind: {
                        store: '{StateFilters}'
                    },
                    viewConfig: {

                    },
                    listeners: {
                        checkchange: 'onTreepanelCheckChange'
                    }
                },
                {
                    xtype: 'treepanel',
                    reference: 'procedurefiltertree',
                    title: 'By Diagnosis',
                    rootVisible: false,
                    useArrows: true,
                    bind: {
                        store: '{ProcedureFilters}'
                    },
                    viewConfig: {

                    },
                    listeners: {
                        checkchange: 'onProcedureFilterCheckChange'
                    }
                }
            ]
        },
        {
            xtype: 'gridpanel',
            region: 'center',
            reference: 'datagrid',
            header: false,
            title: 'Inpatient Statistics',
            bind: {
                store: '{HospitalStats}'
            },
            /*
            selModel: {
               type: 'spreadsheet'
            },
            plugins: 'clipboard',
            */
            columns: [
                {
                    xtype: 'gridcolumn',
                    summaryType: 'count',
                    dataIndex: 'providername',
                    text: 'Provider',
                    flex: 1,
                    summaryRenderer: function(value, summaryData, dataIndex) {
                        return Ext.util.Format.plural(value," Provider");
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 50,
                    dataIndex: 'providerstate',
                    text: 'State'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'drgcode',
                    text: 'Diagnosis',
                    hidden: true,
                    flex: 1
                },
                {
                    xtype: 'numbercolumn',
                    summaryType: 'average',
                    width: 150,
                    align: 'right',
                    dataIndex: 'averagecoveredcharges',
                    text: 'Avg Covered<br>Charges',
                    renderer: Ext.util.Format.usMoney,
                    summaryRenderer: function(value, summaryData, dataIndex) {
                        return "Avg: " + Ext.util.Format.currency(value);
                    }
                },
                {
                    xtype: 'numbercolumn',
                    width: 150,
                    summaryType: 'average',
                    align: 'right',
                    dataIndex: 'averagemedicarepayments',
                    text: 'Avg Medicare<br>Payments',
                    renderer: Ext.util.Format.usMoney,
                    summaryRenderer: function(value, summaryData, dataIndex) {
                        return "Avg: " + Ext.util.Format.currency(value);
                    }
                },
                {
                    xtype: 'numbercolumn',
                    width: 150,
                    summaryType: 'average',
                    align: 'right',
                    dataIndex: 'averagetotalpayments',
                    text: 'Avg Tot. Payments',
                    renderer: Ext.util.Format.usMoney,
                    summaryRenderer: function(value, summaryData, dataIndex) {
                        return "Avg: " + Ext.util.Format.currency(value);
                    }
                },
                {
                    xtype: 'numbercolumn',
                    width: 100,
                    align: 'right',
                    dataIndex: 'totaldischarges',
                    text: 'Patients',
                    format: '0,000',
                    summaryType: 'sum',
                    summaryRenderer: function(value, summaryData, dataIndex) {
                        return "Total: " + value
                    }
                }
            ],
            features: [
                {
                    ftype: 'groupingsummary',
                    hideGroupedHeader: true
                }
            ]
        }
    ],
    tools: [
        {
            xtype: 'tool',
            type: 'help',
            listeners: {
                click: 'onHelpClick'
            },
            tooltip: "About the Dataset"
        },
        {
            xtype: 'tool',
            type: 'download',
            listeners: {
                click: 'onDownload'
            },
            tooltip: "Download to Microsoft Excel"
        },
        {
            xtype: 'tool',
            callback: function(owner, tool, event) {

            },
            type: 'gear',
            tooltip: "Reset grid columns to default"
        },
        {
            xtype: 'tool',
            callback: function(owner, tool, event) {
                tool.up('window').down('grid').getStore().load();
            },
            type: 'refresh',
            tooltip: "Refresh data"
        }
    ]

});