/*
 * File: app/view/admin/billingcodes/BillingCodesViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PatientChart.view.admin.billingcodes.BillingCodesViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.adminbillingcodes',

    onAddRecord: function(tool, e, owner, eOpts) {
        var grid = this.lookupReference('grid');
        var gridStore = grid.getStore();
        var rec = Ext.create(gridStore.model);
        var rowEditor=grid.editingPlugin;
        rowEditor.cancelEdit();
        gridStore.insert(0,rec);
        rowEditor.startEdit(rec,0);
    },

    onDeleteRecords: function(tool, e, owner, eOpts) {
        var grid = this.lookupReference('grid');
        var gridStore = grid.getStore();
        var rowEditor = grid.editingPlugin;
        var sm = grid.getSelectionModel();
        var selections = grid.getSelectionModel().getSelection();

        var labels = Ext.Array.pluck(selections,'data.label');

        Ext.Msg.confirm(
        "Delete " +  Ext.util.Format.plural(selections.length,"Pre-Existing Condition"),
        "Delete " + Ext.util.Format.plural(selections.length," record?"," records?"),
        function(b) {

            grid.setLoading(true);
            rowEditor.cancelEdit();

            for (var i=0; i<selections.length; i++) {
                rec = selections[i];
                rec.erase({
                    scope: this,
                    success: function(record, operation) {
                        grid.setLoading(false);
                    },
                    failure: function(record, operation) {
                        grid.setLoading(false);
                        Ext.Msg.alert("Operation Failed","Please try again later or contact your system administrator");
                    }
                });
            }

        }
        );

    },

    onRowEditingEdit: function(editor, context, eOpts) {
        var rec = context.record;

        rec.save({
            success: function(record,operation) {
                if (operation.action == 'create') {
                    var pk = Ext.decode(operation.getResponse().responseText).id;
                    record.set('id',pk);
                    record.set('updatedate',new Date());
                }
                record.commit();
            },
            failure: function(record,operation) {
                Ext.Msg.alert('Operation failed',"Please try again later.");
                console.log(arguments);
            }
        });
    },

    onRowEditingCanceledit: function(editor, context, eOpts) {
        var rec = context.record;
        if (rec.phantom) {
            context.grid.getStore().remove(rec);
        }
    },

    onRefreshClick: function(tool, e, owner, eOpts) {
        var grid = this.lookupReference('grid');
        var gridStore = grid.getStore();
        var rowEditor = grid.editingPlugin;
        rowEditor.cancelEdit();
        gridStore.load();
    },

    onWindowAfterRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    }

});
